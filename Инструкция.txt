Инструкция.txt
Как работать с нашим репозиторием гитхаб

1. Установка командной консоли разбирается в видео (примерно на 27-ой минуте) - https://yandex.ru/video/preview/?filmId=4836291079495122454&from=tabbar&parent-reqid=1591954200399700-412429224701767434600303-production-app-host-sas-web-yp-137&text=%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0+%D1%81+%D0%B3%D0%B8%D1%82%D1%85%D0%B0%D0%B1+%D0%B2+%D0%B2%D0%B8%D0%BD%D0%B4%D0%BE%D0%B2%D1%81

2. Основные аспекты работы с гитом тоже можно посмотреть в этом видео, там много полезного

3. Приготовления перед работой (Сразу после установки, и всего один раз)

3.1. Установим имена:
git config --global user.name "Your Name"
git config --global user.email "your_email@whatever.com"

3.2.. Парметры окончания строк (Не вдумываемся, просто копируем)
	Для ЛИНУКСА:
	git config --global core.autocrlf input
	git config --global core.safecrlf warn

	Для ВИНДОВС:
	git config --global core.autocrlf true
	git config --global core.safecrlf warn

3.3. Чтобы в консольке отображались русские буквы:
	git config --global core.quotepath off

3.4. Алиасы (Таокая фигня, которая позволяет сокращать команды)

git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
git config --global alias.type 'cat-file -t'
git config --global alias.dump 'cat-file -p'

Если вглядеться, например, в первую строчку: теперь вместо checkout можно писать co

То есть теперь есть возможность писать вместо
	git commit -m "Коментарий для коммита"
можно писать так:
	git ci -m "Коментарий для коммита"

4. Основные команды, которыми мы пользуемся

0) git clone https://github.com/MaksFoxerProgrammer/PandemicProject.git
		- Клонировать наш репозиторий

1) git status // Если с алиасом, то git st
		- выводит инормацию об изменениях, которые вы внесли. Советую ползьоваться по чаще

2) git pull
		- Скачивает все изменения из глобального репозитория (с сайта)

3) git add ...
		- Добавляет изменения, которые будут добавленны в коммит (вместо ... указать пути изменений)

4) git commit -m ""  // С алиасами: git ci -m ""
		- Создаеёт коммит на ЛОКАЛЬНОМ репозитории (т.е. толко на вашем ПК)
		Каждый коммит в проекте - версия того, или иного момента.
		Коммитов может быть много, хоть после каждой запятой, но смысла в этом нет,
		лучше создавать коммиты в итоговых версиях, и в моментах, когда планируется
		попробовать что-то, после чего теоретически может все сломаться

5) git push
		- Отправляет ЛОКАЛЬНЫЕ коммиты в ГОЛБАЛЬНЫЙ

==================

Для тех, кто рослушал видео:

Мы работаем на одной ветке (master), т.к. иначе команда просто запутается
Я согласен, что удобнее будет создать по ветке каждому, кто занимается разработкой, но это будет 
целесообразно лишь в том случае, если ребята смогут сами оперировать этими командами
Место, где я учился сам - https://githowto.com/ru/setup
Мне на непрерывное изучение понадобилось около 2х часов
Если будут идеии, предложения, или замечания - я открыт к критике